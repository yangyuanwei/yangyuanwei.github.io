<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo更换主题后问题集锦</title>
      <link href="/2021/07/13/Hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E5%90%8E404%E6%8A%A5%E9%94%99/"/>
      <url>/2021/07/13/Hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E5%90%8E404%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="问题一：hexo-d-部署后，出现404-There-isn’t-a-GitHubPage-site-here"><a href="#问题一：hexo-d-部署后，出现404-There-isn’t-a-GitHubPage-site-here" class="headerlink" title="问题一：hexo d 部署后，出现404 There isn’t a GitHubPage site here."></a>问题一：hexo d 部署后，出现404 There isn’t a GitHubPage site here.</h3><img src="/2021/07/13/Hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E5%90%8E404%E6%8A%A5%E9%94%99/404.png" class=""><p> <font color=red>hexo d</font>  生成的public文件夹下的 html等文件都为空</p><p> 原因一：Hexo 版本太旧了<br> 原因二：Node的版本太旧了</p><span id="more"></span><h4 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h4><p> 1、全局升级<font color=red>hexo-cli</font> ，先<font color=red>hexo version</font> 查看当前版本，然后<font color=red>npm i hexo-cli -g</font> ，再次<font color=red>hexo version</font> 查看是否升级成功。</p><p>2、使用<font color=red>npm install -g npm-check</font> 和<font color=red>npm-check</font> ，检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</p><p>3、使用<font color=red>npm install -g npm-upgrade</font> 和<font color=red>npm-upgrade</font> ，升级系统中的插件</p><p>4、使用<font color=red>npm update -g</font> 和<font color=red>npm update –save</font> </p><h4 id="升级Node-（Node-js-版本限制）"><a href="#升级Node-（Node-js-版本限制）" class="headerlink" title="升级Node （Node.js 版本限制）"></a>升级Node （Node.js 版本限制）</h4><p>我们强烈建议永远安装最新版本的 Hexo，以及 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><img src="/2021/07/13/Hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E5%90%8E404%E6%8A%A5%E9%94%99/16261412155884.png" class=""><h3 id="问题二：hexo使用theme"><a href="#问题二：hexo使用theme" class="headerlink" title="问题二：hexo使用theme"></a>问题二：hexo使用theme</h3><h4 id="hexo使用theme出现“-“问题"><a href="#hexo使用theme出现“-“问题" class="headerlink" title="hexo使用theme出现“ “问题"></a>hexo使用theme出现“ “问题</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> ‘_layout.swig‘ %&#125;</span><span class="xml"> </span><span class="template-tag">&#123;% <span class="name">import</span> ‘_macro/post.swig‘ <span class="keyword">as</span> post_template %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br></pre></td></tr></table></figure><p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p><p> <font color=red>npm i hexo-renderer-swig</font> </p><h3 id="问题三：hexo中next主题下创建标签问题-Cannot-GET-tags-20"><a href="#问题三：hexo中next主题下创建标签问题-Cannot-GET-tags-20" class="headerlink" title="问题三：hexo中next主题下创建标签问题 Cannot GET /tags/%20/"></a>问题三：hexo中next主题下创建标签问题 Cannot GET /tags/%20/</h3><p> 但是点击tags界面之后只有一行字Cannot GET /tags/%20/<br>经过一通搜索，知道%20 是空格的意思，把配置文件里 ||之前所有的空格删掉即可。<br>例如：<br><code>/archives/||  之间没有空格</code></p><img src="/2021/07/13/Hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E5%90%8E404%E6%8A%A5%E9%94%99/1626150318770.jpg" class=""><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://juejin.cn/post/6844903490930622471">浅析 Hexo 搭建博客的原理</a></li><li><a href="https://blog.csdn.net/qq_39898645/article/details/109181736">hexo使用theme出现问题</a></li><li><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85-Hexo">hexo安装文档</a></li></ul><ul><li> 如有疑问，欢迎在评论区一起讨论！</li><li> 如有不正确的地方，欢迎指导！</li></ul><blockquote><h2 id="注：本文首发于-YYW’s-Blog，如若转载，请注来源"><a href="#注：本文首发于-YYW’s-Blog，如若转载，请注来源" class="headerlink" title="注：本文首发于 YYW’s Blog，如若转载，请注来源"></a>注：本文首发于 <a href="http://yangyuanweitech.com/">YYW’s Blog</a>，如若转载，请注来源</h2></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>底层原理（一）：Object-C对象的本质</title>
      <link href="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
      <url>/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="前沿"><a href="#前沿" class="headerlink" title="前沿"></a>前沿</h4><p>我们平时编写的Object-C代码，底层实现都是C/C++代码</p><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16255785977868.png" class=""><p>所以Object-C的面向对象都是C/C++的数据结构</p><h4 id="思考🤔"><a href="#思考🤔" class="headerlink" title="思考🤔"></a>思考🤔</h4><ul><li>思考1：Object-C的对象、类主要都是基于C/C++的什么数据结构实现的？</li><li>思考2：一个OC对象在内存中是怎样布局的？</li><li>思考3：一个复杂的有继承结构的类的实例对象在内存中是怎样布局的？</li><li>思考4：创建一个实例对象，至少需要多少内存？</li></ul><h4 id="探究NSObject对象的内部结构"><a href="#探究NSObject对象的内部结构" class="headerlink" title="探究NSObject对象的内部结构"></a>探究NSObject对象的内部结构</h4><span id="more"></span><h5 id="将Object-C对象转换为C-C-代码"><a href="#将Object-C对象转换为C-C-代码" class="headerlink" title="将Object-C对象转换为C/C++代码"></a>将Object-C对象转换为C/C++代码</h5><p>第一步：新建一个工程,创建一个YYWPesrson继承自NSObject</p><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16256510646559.png" class=""><p>进入到工程目录的文件</p><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16256324158486.png" class=""><h5 id="将Objective-C代码转换为C-C-代码"><a href="#将Objective-C代码转换为C-C-代码" class="headerlink" title="将Objective-C代码转换为C\C++代码"></a>将Objective-C代码转换为C\C++代码</h5><p>xcrun  -sdk  iphoneos  clang  -arch  arm64  -rewrite-objc  OC源文件  -o  输出的CPP文件</p><ul><li>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main.cpp<br>会生成 main.cpp文件<img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16256467485821.png" class=""></li></ul><h4 id="NSObject源码"><a href="#NSObject源码" class="headerlink" title="NSObject源码"></a>NSObject源码</h4><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16256469457584.png" class=""><p>NSObject结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct NSObject_IMPL &#123;</span><br><span class="line">trueClass isa<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16256469457584.png" class=""><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16256511674944.png" class=""><p><strong>通过源码可以看到，Person（NSObject）对象本质就是C++ 的结构体</strong></p><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/16256511982582.png" class=""><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/Student.png" class=""><h4 id="常用的LLDB指令"><a href="#常用的LLDB指令" class="headerlink" title="常用的LLDB指令"></a>常用的LLDB指令</h4><ul><li>print、p : 打印</li><li>po : 打印对象</li></ul><h4 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h4><p><strong>Debug -&gt; Debug Workfllow -&gt; View Memory （Shift + Command + M</strong></p><h4 id="复制结构的实例对象的内存布局"><a href="#复制结构的实例对象的内存布局" class="headerlink" title="复制结构的实例对象的内存布局"></a>复制结构的实例对象的内存布局</h4><img src="/2021/07/12/02-%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AObject-C%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/pensonStudent.png" class=""><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>OC对象本质就是C++ 的结构体</li><li>NSObject内部有个 isa指针，OC对象都继承子NSObject,所有OC对象里面都会有isa指针</li></ol><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><ul><li><a href="https://juejin.cn/post/6844903621306368014">小码哥iOS学习笔记第一天: Objective-C的本质</a></li></ul><ul><li>如有疑问，欢迎在评论区一起讨论！</li><li>如有不正确的地方，欢迎指导！</li></ul><blockquote><p>注：本文首发于 <a href="http://yangyuanweitech.com/">YYW’s Blog</a>，如若转载，请注来源</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactiveCocoa Tutorial - The Definitive Introduction:Part 1/2</title>
      <link href="/2017/09/11/01-ReactiveCocoa-Part1-2/"/>
      <url>/2017/09/11/01-ReactiveCocoa-Part1-2/</url>
      
        <content type="html"><![CDATA[<p>As an iOS developer, nearly every line of code you write is in reaction to some event; a button tap, a received network message, a property change (via Key Value Observing) or a change in user’s location via CoreLocation are all good examples. However, these events are all encoded in different ways; as actions, delegates, KVO, callbacks and others. ReactiveCocoa defines a standard interface for events, so they can be more easily chained, filtered and composed using a basic set of tools.</p><span id="more"></span><p>Sound confusing? Intriguing? … Mind blowing? Then read on :]</p><p>ReactiveCocoa combines a couple of programming styles:</p><p>Functional Programming which makes use of higher order functions, i.e. functions which take other functions as their arguments<br>Reactive Programming which focuses of data-flows and change propagation<br>For this reason, you might hear ReactiveCocoa described as a Functional Reactive Programming (or FRP) framework.</p><p>Rest assured, that is as academic as this tutorial is going to get! Programming paradigms are a fascinating subject, but the rest of this ReactiveCocoa tutorials focuses solely on the practical value, with work-through examples instead of academic theories.</p><p>The Reactive Playground</p><p>Throughout this ReactiveCocoa tutorial, you’ll be introducing reactive programming to a very simple example application, the ReactivePlayground. Download the starter project, then build and run to verify you have everything set up correctly.</p><p>ReactivePlayground is a very simple app that presents a sign-in screen to the user. Supply the correct credentials, which are, somewhat imaginatively, user for the username, and password for the password, and you’ll be greeted by a picture of a lovely little kitten.</p><p>Awww! How cute!</p><p>Right now it’s a good point to spend a little time looking through the code of this starter project. It is quite simple, so it shouldn’t take long.</p><p>Open RWViewController.m and take a look around. How quickly can you identify the condition that results in the enabling of the Sign In button? What are the rules for showing / hiding the signInFailure label? In this relatively simple example, it might take only a minute or two to answer these questions. For a more complex example, you should be able to see how this same type of analysis might take quite a bit longer.</p><p>With the use of ReactiveCocoa, the underlying intent of the application will become a lot clearer. It’s time to get started!</p><p>Adding the ReactiveCocoa Framework</p><p>The easiest way to add the ReactiveCocoa framework to your project is via CocoaPods. If you’ve never used CocoaPods before it might make sense to follow the Introduction To CocoaPods tutorial on this site, or at the very least run through the initial steps of that tutorial so you can install the prerequisites.</p><p>Note: If for some reason you don’t want to use CocoaPods you can still use ReactiveCocoa, just follow the Importing ReactiveCocoa steps in the documentation on GitHub.</p><p>If you still have the ReactivePlayground project open in Xcode, then close it now. CocoaPods will create an Xcode workspace, which you’ll want to use instead of the original project file.</p><p>Open Terminal. Navigate to the folder where your project is located and type the following:</p><p>touch Podfile<br>open -e Podfile</p><p>This creates an empty file called Podfile and opens it with TextEdit. Copy and paste the following lines into the TextEdit window:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, <span class="string">&#x27;7.0&#x27;</span></span><br><span class="line"></span><br><span class="line">pod <span class="string">&#x27;ReactiveCocoa&#x27;</span>, <span class="string">&#x27;2.1.8&#x27;</span></span><br></pre></td></tr></table></figure><p>This sets the platform to iOS, the minimum SDK version to 7.0, and adds the ReactiveCocoa framework as a dependency.</p><p>Once you’ve saved this file, go back to the Terminal window and issue the following command:</p><p>pod install</p><p>You should see an output similar to the following:</p><p>Analyzing dependencies<br>Downloading dependencies<br>Installing ReactiveCocoa (2.1.8)<br>Generating Pods project<br>Integrating client project</p><p>[!] From now on use <code>RWReactivePlayground.xcworkspace</code>.</p><p>This indicates that the ReactiveCocoa framework has been downloaded, and CocoaPods has created an Xcode workspace to integrate the framework into your existing application.</p><p>Open up the newly generated workspace, RWReactivePlayground.xcworkspace, and look at the structure CocoaPods created inside the Project Navigator:</p><p>You should see that CocoaPods created a new workspace and added the original project, RWReactivePlayground, together with a Pods project that includes ReactiveCocoa. CocoaPods really does make managing dependencies a breeze!</p><p>You’ll notice this project’s name is ReactivePlayground, so that must mean it’s time to play …</p><p>Time To Play</p><p>As mentioned in the introduction, ReactiveCocoa provides a standard interface for handling the disparate stream of events that occur within your application. In ReactiveCocoa terminology these are called signals, and are represented by the RACSignal class.</p><p>Open the initial view controller for this app, RWViewController.m, and import the ReactiveCocoa header by adding the following to the top of the file:</p><p>#import &lt;ReactiveCocoa/ReactiveCocoa.h&gt;</p><p>You aren’t going to replace any of the existing code just yet, for now you’re just going to play around a bit. Add the following code to the end of the viewDidLoad method:</p><p>[self.usernameTextField.rac_textSignal subscribeNext:^(id x) {<br>NSLog(@”%@”, x);<br>}];</p><p>Build and run the application and type some text into the username text field. Keep an eye on the console and look for an output similar to the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">2013-12-24 14:48:50.359 RWReactivePlayground[9193:a0b] i</span><br><span class="line">2013-12-24 14:48:50.436 RWReactivePlayground[9193:a0b] is</span><br><span class="line">2013-12-24 14:48:50.541 RWReactivePlayground[9193:a0b] is </span><br><span class="line">2013-12-24 14:48:50.695 RWReactivePlayground[9193:a0b] is t</span><br><span class="line">2013-12-24 14:48:50.831 RWReactivePlayground[9193:a0b] is th</span><br><span class="line">2013-12-24 14:48:50.878 RWReactivePlayground[9193:a0b] is thi</span><br><span class="line">2013-12-24 14:48:50.901 RWReactivePlayground[9193:a0b] is this</span><br><span class="line">2013-12-24 14:48:51.009 RWReactivePlayground[9193:a0b] is this </span><br><span class="line">2013-12-24 14:48:51.142 RWReactivePlayground[9193:a0b] is this m</span><br><span class="line">2013-12-24 14:48:51.236 RWReactivePlayground[9193:a0b] is this ma</span><br><span class="line">2013-12-24 14:48:51.335 RWReactivePlayground[9193:a0b] is this mag</span><br><span class="line">2013-12-24 14:48:51.439 RWReactivePlayground[9193:a0b] is this magi</span><br><span class="line">2013-12-24 14:48:51.535 RWReactivePlayground[9193:a0b] is this magic</span><br><span class="line">2013-12-24 14:48:51.774 RWReactivePlayground[9193:a0b] is this magic?```</span><br><span class="line"></span><br><span class="line">You can see that each time you change the text within the text field, the code within the block executes. No target-action, no delegates — just signals and blocks. That’s pretty exciting!</span><br><span class="line"></span><br><span class="line">ReactiveCocoa signals (represented by RACSignal) send a stream of events to their subscribers. There are three types of events to know: next, error and completed. A signal may send any number of next events before it terminates after an error, or it completes. In this part of the tutorial you’ll focus on the next event. Be sure to <span class="built_in">read</span> part two when it’s available to learn about error and completed events.</span><br><span class="line"></span><br><span class="line">RACSignal has a number of methods you can use to subscribe to these different event types. Each method takes one or more blocks, with the logic <span class="keyword">in</span> your block executing when an event occurs. In this <span class="keyword">case</span>, you can see that the subscribeNext: method was used to supply a block that executes on each next event.</span><br><span class="line"></span><br><span class="line">The ReactiveCocoa framework uses categories to add signals to many of the standard UIKit controls so you can add subscriptions to their events, <span class="built_in">which</span> is <span class="built_in">where</span> the rac_textSignal property on the text field came from.</span><br><span class="line"></span><br><span class="line">But enough with the theory, it’s time to start making ReactiveCocoa <span class="keyword">do</span> some work <span class="keyword">for</span> you!</span><br><span class="line"></span><br><span class="line">ReactiveCocoa has a large range of operators you can use to manipulate streams of events. For example, assume you’re only interested <span class="keyword">in</span> a username <span class="keyword">if</span> it’s more than three characters long. You can achieve this by using the filter operator. Update the code you added previously <span class="keyword">in</span> viewDidLoad to the following:</span><br><span class="line"></span><br><span class="line">           ``` bash</span><br><span class="line">            [[self.usernameTextField.rac_textSignal</span><br><span class="line">            filter:^BOOL(id value) &#123;</span><br><span class="line">            NSString *text = value;</span><br><span class="line">            <span class="built_in">return</span> text.length &gt; 3;</span><br><span class="line">            &#125;]</span><br><span class="line">            subscribeNext:^(id x) &#123;</span><br><span class="line">            NSLog(@<span class="string">&quot;%@&quot;</span>, x);</span><br><span class="line">            &#125;];</span><br></pre></td></tr></table></figure><p>If you build and run, then type some text into the text field, you should find that it only starts logging when the text field length is greater than three characters:</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.335</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> t</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.478</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> th</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.526</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> thi</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.548</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.676</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this </span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.798</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this m</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.926</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this ma</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">51.987</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this mag</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">52.141</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this magi</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">52.229</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this magic</span><br><span class="line"><span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">08</span>:<span class="number">17</span>:<span class="number">52.486</span> RWReactivePlayground[<span class="number">9654</span>:a0b] <span class="keyword">is</span> this magic?```</span><br><span class="line"></span><br><span class="line">What you’ve created here <span class="keyword">is</span> a very simple pipeline. It <span class="keyword">is</span> the very essence <span class="keyword">of</span> Reactive Programming, <span class="keyword">where</span> you express your application’s functionality <span class="keyword">in</span> terms <span class="keyword">of</span> data flows.</span><br><span class="line"></span><br><span class="line">It can help <span class="keyword">to</span> picture these flows graphically:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> the above diagram you can see that the rac_textSignal <span class="keyword">is</span> the initial source <span class="keyword">of</span> events. The data flows through a filter that only allows events <span class="keyword">to</span> pass <span class="keyword">if</span> they contain a string <span class="keyword">with</span> a length that <span class="keyword">is</span> greater than three. The <span class="keyword">final</span> <span class="keyword">step</span> <span class="keyword">in</span> the pipeline <span class="keyword">is</span> subscribeNext: <span class="keyword">where</span> your <span class="keyword">block</span> logs the <span class="keyword">event</span> value.</span><br><span class="line"></span><br><span class="line">At this point it’s worth noting that the output <span class="keyword">of</span> the filter operation <span class="keyword">is</span> also an RACSignal. You could arrange the code <span class="keyword">as</span> follows <span class="keyword">to</span> show the discrete pipeline steps:</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    RACSignal *usernameSourceSignal = </span><br><span class="line">    <span class="keyword">self</span>.usernameTextField.rac_textSignal;</span><br><span class="line"></span><br><span class="line">    RACSignal *filteredUsername = [usernameSourceSignal  </span><br><span class="line">    filter:^BOOL(id value) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    NSString *text = value;</span></span><br><span class="line"><span class="comment">    return text.length &gt; 3;</span></span><br><span class="line"><span class="comment">    &#125;</span>];</span><br><span class="line"></span><br><span class="line">    [filteredUsername subscribeNext:^(id x) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line"><span class="comment">    &#125;</span>];```</span><br><span class="line"></span><br><span class="line">Because <span class="keyword">each</span> operation <span class="keyword">on</span> an RACSignal also returns an RACSignal it’s termed a fluent <span class="keyword">interface</span>. This feature allows you <span class="keyword">to</span> construct pipelines without the need <span class="keyword">to</span> <span class="keyword">reference</span> <span class="keyword">each</span> <span class="keyword">step</span> <span class="keyword">using</span> a local variable.</span><br><span class="line"></span><br><span class="line">Note: ReactiveCocoa makes heavy use <span class="keyword">of</span> blocks. <span class="keyword">If</span> you’re <span class="keyword">new</span> <span class="keyword">to</span> blocks, you might want <span class="keyword">to</span> <span class="keyword">read</span> Apple’s Blocks Programming Topics. <span class="keyword">And</span> <span class="keyword">if</span>, like me, you’re familiar <span class="keyword">with</span> blocks, but find the syntax a little confusing <span class="keyword">and</span> hard <span class="keyword">to</span> remember, you might find the amusingly titled f*****gblocksyntax.com quite useful! (We censored the word <span class="keyword">to</span> protect the innocent, but the link <span class="keyword">is</span> fully functional.)</span><br><span class="line">A Little Cast</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you updated your code <span class="keyword">to</span> split it <span class="keyword">into</span> the various RACSignal components, now <span class="keyword">is</span> the time <span class="keyword">to</span> revert it back <span class="keyword">to</span> the fluent syntax:</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    [[<span class="keyword">self</span>.usernameTextField.rac_textSignal</span><br><span class="line">    filter:^BOOL(id value) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    NSString *text = value; // implicit cast</span></span><br><span class="line"><span class="comment">    return text.length &gt; 3;</span></span><br><span class="line"><span class="comment">    &#125;</span>]</span><br><span class="line">    subscribeNext:^(id x) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line"><span class="comment">    &#125;</span>];```</span><br><span class="line"></span><br><span class="line">The implicit cast <span class="keyword">from</span> id <span class="keyword">to</span> NSString, at the indicated location <span class="keyword">in</span> the code above, <span class="keyword">is</span> less than elegant. Fortunately, since the value passed <span class="keyword">to</span> this <span class="keyword">block</span> <span class="keyword">is</span> always going <span class="keyword">to</span> be an NSString, you can change the parameter <span class="keyword">type</span> itself. Update your code <span class="keyword">as</span> follows:</span><br><span class="line"></span><br><span class="line">   ```bash</span><br><span class="line">    [[<span class="keyword">self</span>.usernameTextField.rac_textSignal</span><br><span class="line">    filter:^BOOL(NSString *text) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    return text.length &gt; 3;</span></span><br><span class="line"><span class="comment">    &#125;</span>]</span><br><span class="line">    subscribeNext:^(id x) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line"><span class="comment">    &#125;</span>];```</span><br><span class="line"></span><br><span class="line">Build <span class="keyword">and</span> run <span class="keyword">to</span> confirm this works just <span class="keyword">as</span> it did previously.</span><br><span class="line"></span><br><span class="line">What’s An <span class="keyword">Event</span>?</span><br><span class="line"></span><br><span class="line">So far this tutorial <span class="keyword">has</span> described the different <span class="keyword">event</span> types, but hasn’t detailed the structure <span class="keyword">of</span> these events. What’s interesting <span class="keyword">is</span> that an <span class="keyword">event</span> can contain absolutely anything!</span><br><span class="line"></span><br><span class="line"><span class="keyword">As</span> an illustration <span class="keyword">of</span> this point, you’re going <span class="keyword">to</span> <span class="keyword">add</span> another operation <span class="keyword">to</span> the pipeline. Update the code you added <span class="keyword">to</span> viewDidLoad <span class="keyword">as</span> follows:</span><br><span class="line"></span><br><span class="line">        ```bash</span><br><span class="line">        [[[<span class="keyword">self</span>.usernameTextField.rac_textSignal</span><br><span class="line">        map:^id(NSString *text) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return @(text.length);</span></span><br><span class="line"><span class="comment">        &#125;</span>]</span><br><span class="line">        filter:^BOOL(NSNumber *length) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return [length integerValue] &gt; 3;</span></span><br><span class="line"><span class="comment">        &#125;</span>]</span><br><span class="line">        subscribeNext:^(id x) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        NSLog(@&quot;%@&quot;, x);</span></span><br><span class="line"><span class="comment">        &#125;</span>];```</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you build <span class="keyword">and</span> run you’ll find the app now logs the length <span class="keyword">of</span> the text instead <span class="keyword">of</span> the contents:</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">54.566</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">4</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">54.725</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">5</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">54.853</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">6</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">55.061</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">7</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">55.197</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">8</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">55.300</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">9</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">55.462</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">10</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">55.558</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">11</span></span><br><span class="line">        <span class="number">2013</span>-<span class="number">12</span>-<span class="number">26</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">55.646</span> RWReactivePlayground[<span class="number">10079</span>:a0b] <span class="number">12</span>```</span><br><span class="line"></span><br><span class="line">The newly added map operation transforms the <span class="keyword">event</span> data <span class="keyword">using</span> the supplied <span class="keyword">block</span>. <span class="keyword">For</span> <span class="keyword">each</span> next <span class="keyword">event</span> it receives, it runs the given <span class="keyword">block</span> <span class="keyword">and</span> emits the return value <span class="keyword">as</span> a next <span class="keyword">event</span>. <span class="keyword">In</span> the code above, the map takes the NSString input <span class="keyword">and</span> takes its length, which results <span class="keyword">in</span> an NSNumber being returned.</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> a stunning graphic depiction <span class="keyword">of</span> how this works, <span class="keyword">take</span> a look at this image:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">As</span> you can see, all <span class="keyword">of</span> the steps that follow the map operation now receive NSNumber instances. You can use the map operation <span class="keyword">to</span> transform the received data <span class="keyword">into</span> anything you like, <span class="keyword">as</span> long <span class="keyword">as</span> it’s an object.</span><br><span class="line"></span><br><span class="line">Note: <span class="keyword">In</span> the above example the text.length <span class="keyword">property</span> returns an NSUInteger, which <span class="keyword">is</span> a primitive <span class="keyword">type</span>. <span class="keyword">In</span> <span class="keyword">order</span> <span class="keyword">to</span> use it <span class="keyword">as</span> the contents <span class="keyword">of</span> an <span class="keyword">event</span>, it must be boxed. Fortunately the Objective-C literal syntax provides <span class="keyword">and</span> option <span class="keyword">to</span> <span class="keyword">do</span> this <span class="keyword">in</span> a rather concise manner – @(text.length).</span><br><span class="line">That’s enough playing! It’s time <span class="keyword">to</span> update the ReactivePlayground app <span class="keyword">to</span> use the concepts you’ve learned so far. You may <span class="keyword">remove</span> all <span class="keyword">of</span> the code you’ve added since you started this tutorial.</span><br><span class="line"></span><br><span class="line">Creating Valid State Signals</span><br><span class="line"></span><br><span class="line">The first thing you need <span class="keyword">to</span> <span class="keyword">do</span> <span class="keyword">is</span> <span class="keyword">create</span> a couple <span class="keyword">of</span> signals that indicate whether the username <span class="keyword">and</span> password text fields are valid. <span class="keyword">Add</span> the following <span class="keyword">to</span> the <span class="keyword">end</span> <span class="keyword">of</span> viewDidLoad <span class="keyword">in</span> RWViewController.m:</span><br><span class="line"></span><br><span class="line">    ``` bash</span><br><span class="line">        RACSignal *validUsernameSignal =</span><br><span class="line">        [<span class="keyword">self</span>.usernameTextField.rac_textSignal</span><br><span class="line">        map:^id(NSString *text) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return @([self isValidUsername:text]);</span></span><br><span class="line"><span class="comment">        &#125;</span>];</span><br><span class="line"></span><br><span class="line">        RACSignal *validPasswordSignal =</span><br><span class="line">        [<span class="keyword">self</span>.passwordTextField.rac_textSignal</span><br><span class="line">        map:^id(NSString *text) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return @([self isValidPassword:text]);</span></span><br><span class="line"><span class="comment">        &#125;</span>];```</span><br><span class="line"></span><br><span class="line"><span class="keyword">As</span> you can see, the above code applies a map transform <span class="keyword">to</span> the rac_textSignal <span class="keyword">from</span> <span class="keyword">each</span> text field. The output <span class="keyword">is</span> a boolean value boxed <span class="keyword">as</span> a NSNumber.</span><br><span class="line"></span><br><span class="line">The next <span class="keyword">step</span> <span class="keyword">is</span> <span class="keyword">to</span> transform these signals so that they provide a nice background color <span class="keyword">to</span> the text fields. Basically, you subscribe <span class="keyword">to</span> this signal <span class="keyword">and</span> use the <span class="keyword">result</span> <span class="keyword">to</span> update the text field background color. One viable option <span class="keyword">is</span> <span class="keyword">as</span> follows:</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">        [[validPasswordSignal</span><br><span class="line">        map:^id(NSNumber *passwordValid) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return [passwordValid boolValue] ? [UIColor clearColor] : [UIColor yellowColor];</span></span><br><span class="line"><span class="comment">        &#125;</span>]</span><br><span class="line">        subscribeNext:^(UIColor *color) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        self.passwordTextField.backgroundColor = color;</span></span><br><span class="line"><span class="comment">        &#125;</span>]; ```</span><br><span class="line"></span><br><span class="line">(Please don’t <span class="keyword">add</span> this code, there’s a much more elegant solution coming!)</span><br><span class="line"></span><br><span class="line">Conceptually you’re assigning the output <span class="keyword">of</span> this signal <span class="keyword">to</span> the backgroundColor <span class="keyword">property</span> <span class="keyword">of</span> the text field. However, the code above <span class="keyword">is</span> a poor expression <span class="keyword">of</span> this; it’s all backwards!</span><br><span class="line"></span><br><span class="line">Fortunately, ReactiveCocoa <span class="keyword">has</span> a macro that allows you <span class="keyword">to</span> express this <span class="keyword">with</span> grace <span class="keyword">and</span> elegance. <span class="keyword">Add</span> the following code directly beneath the two signals you added <span class="keyword">to</span> viewDidLoad:</span><br><span class="line">```bash</span><br><span class="line">        RAC(<span class="keyword">self</span>.passwordTextField, backgroundColor) =</span><br><span class="line">        [validPasswordSignal</span><br><span class="line">        map:^id(NSNumber *passwordValid) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return [passwordValid boolValue] ? [UIColor clearColor] : [UIColor yellowColor];</span></span><br><span class="line"><span class="comment">        &#125;</span>];</span><br><span class="line"></span><br><span class="line">        RAC(<span class="keyword">self</span>.usernameTextField, backgroundColor) =</span><br><span class="line">        [validUsernameSignal</span><br><span class="line">        map:^id(NSNumber *passwordValid) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        return [passwordValid boolValue] ? [UIColor clearColor] : [UIColor yellowColor];</span></span><br><span class="line"><span class="comment">        &#125;</span>];</span><br></pre></td></tr></table></figure><p>The RAC macro allows you to assign the output of a signal to the property of an object. It takes two arguments, the first is the object that contains the property to set and the second is the property name. Each time the signal emits a next event, the value that passes is assigned to the given property.</p><p>This is a very elegant solution, don’t you think?</p><p>One last thing before you build and run. Locate the updateUIState method and remove the first two lines:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.usernameTextField.backgroundColor = self.usernameIsValid ? [UIColor clearColor] : [UIColor yellowColor];</span><br><span class="line">self.passwordTextField.backgroundColor = self.passwordIsValid ? [UIColor clearColor] : [UIColor yellowColor];</span><br></pre></td></tr></table></figure><p>That will clean up the non-reactive code.</p><p>Build and run the application. You should find that the text fields look highlighted when invalid, and clear when valid.</p><p>Visuals are nice, so here is a way to visualize the current logic. Here you can see two simple pipelines that take the text signals, map them to validity-indicating booleans, and then follow with a second mapping to a UIColorwhich is the part that binds to the background color of the text field.</p><p>Are you wondering why you created separate validPasswordSignal and validUsernameSignal signals, as opposed to a single fluent pipeline for each text field? Patience dear reader, the method behind this madness will become clear shortly!</p><p>Combining signals</p><p>In the current app, the Sign In button only works when both the username and password text fields have valid input. It’s time to do this reactive-style!</p><p>The current code already has signals that emit a boolean value to indicate if the username and password fields are valid; validUsernameSignal and validPasswordSignal. Your task is to combine these two signals to determine when it is okay to enable the button.</p><p>At the end of viewDidLoad add the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *signUpActiveSignal =</span><br><span class="line">[RACSignal combineLatest:@[validUsernameSignal, validPasswordSignal]</span><br><span class="line">reduce:^id(NSNumber *usernameValid, NSNumber *passwordValid) &#123;</span><br><span class="line"><span class="built_in">return</span> @([usernameValid boolValue] &amp;&amp; [passwordValid boolValue]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>The above code uses the combineLatest:reduce: method to combine the latest values emitted by validUsernameSignal and validPasswordSignal into a shiny new signal. Each time either of the two source signals emits a new value, the reduce block executes, and the value it returns is sent as the next value of the combined signal.</p><p>Note: The RACSignal combine methods can combine any number of signals, and the arguments of the reduce block correspond to each of the source signals. ReactiveCocoa has a cunning little utility class, RACBlockTrampoline that handles the reduce block’s variable argument list internally. In fact, there are a lot of cunning tricks hidden within the ReactiveCocoa implementation, so it’s well worth pulling back the covers!<br>Now that you have a suitable signal, add the following to the end of viewDidLoad. This will wire it up to the enabled property on the button:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[signUpActiveSignal subscribeNext:^(NSNumber *signupActive) &#123;</span><br><span class="line">self.signInButton.enabled = [signupActive boolValue];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>Before running this code, it’s time to rip out the old implementation. Remove these two properties from the top of the file:</p><p>@property (nonatomic) BOOL passwordIsValid;<br>@property (nonatomic) BOOL usernameIsValid;</p><p>From near the top of viewDidLoad, remove the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// handle text changes <span class="keyword">for</span> both text fields</span><br><span class="line">    [self.usernameTextField addTarget:self</span><br><span class="line">    action:@selector(usernameTextFieldChanged)</span><br><span class="line">    forControlEvents:UIControlEventEditingChanged];</span><br><span class="line">    [self.passwordTextField addTarget:self </span><br><span class="line">    action:@selector(passwordTextFieldChanged)</span><br><span class="line">    forControlEvents:UIControlEventEditingChanged];</span><br></pre></td></tr></table></figure><p>Also remove the updateUIState, usernameTextFieldChanged and passwordTextFieldChanged methods. Whew! That’s a lot of non-reactive code you just disposed of! You’ll be thankful you did.</p><p>Finally, make sure to remove the call to updateUIState from viewDidLoad as well.</p><p>If you build and run, check the Sign In button. It should be enabled because the username and password text fields are valid, as they were before.</p><p>An update to the application logic diagram gives the following:</p><p>The above illustrates a couple of important concepts that allow you to perform some pretty powerful tasks with ReactiveCocoa;</p><p>Splitting – signals can have multiple subscribers and serve as the source for more multiple subsequent pipeline steps. In the above diagram, note that the boolean signals that indicate password and username validity are split and used for a couple of different purposes.<br>Combining – multiple signals may be combined to create new signals. In this case, two boolean signals were combined. However, you can combine signals that emit any value type.<br>The result of these changes is the application no longer has private properties that indicate the current valid state of the two text fields. This is one of the key differences you’ll find when you adopt a reactive style — you don’t need to use instance variables to track transient state.</p><p>Reactive Sign-in</p><p>The application currently uses the reactive pipelines illustrated above to manage the state of the text fields and button. However, the button press handling still uses actions, so the next step is to replace the remaining application logic in order to make it all reactive!</p><p>The Touch Up Inside event on the Sign In button is wired up to the signInButtonTouched method in RWViewController.m via a storyboard action. You’re going to replace this with the reactive equivalent, so you first need to disconnect the current storyboard action.</p><p>Open up Main.storyboard, locate the Sign In button, ctrl-click to bring up the outlet / action connections and click the x to remove the connection. If you feel a little lost, the diagram below kindly shows where to find the delete button:</p><p>You’ve already seen how the ReactiveCocoa framework adds properties and methods to the standard UIKit controls. So far you’ve used rac_textSignal, which emits events when the text changes. In order to handle events you need to use another of the methods that ReactiveCocoa adds to UIKit, rac_signalForControlEvents.</p><p>Returning to RWViewController.m, add the following to the end of viewDidLoad:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[[self.signInButton</span><br><span class="line">rac_signalForControlEvents:UIControlEventTouchUpInside]</span><br><span class="line">subscribeNext:^(id x) &#123;</span><br><span class="line">NSLog(@<span class="string">&quot;button clicked&quot;</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>The above code creates a signal from the button’s UIControlEventTouchUpInside event and adds a subscription to make a log entry every time this event occurs.</p><p>Build and run to confirm the message actually logs. Bear in mind that the button will enable only when the username and password are valid, so be sure to type some text into both fields before tapping the button!</p><p>You should see messages in the Xcode console similar to the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2013-12-28 08:05:10.816 RWReactivePlayground[18203:a0b] button clicked</span><br><span class="line">2013-12-28 08:05:11.675 RWReactivePlayground[18203:a0b] button clicked</span><br><span class="line">2013-12-28 08:05:12.605 RWReactivePlayground[18203:a0b] button clicked</span><br><span class="line">2013-12-28 08:05:12.766 RWReactivePlayground[18203:a0b] button clicked</span><br><span class="line">2013-12-28 08:05:12.917 RWReactivePlayground[18203:a0b] button clicked</span><br></pre></td></tr></table></figure><p>Now that the button has a signal for the touch event, the next step is to wire this up with the sign-in process itself. This presents something of a problem — but that’s good, you don’t mind a problem, right? Open up RWDummySignInService.h and take a look at the interface:</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^RWSignInResponse)(<span class="built_in">BOOL</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RWDummySignInService</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)signInWithUsername:(<span class="built_in">NSString</span> *)username</span><br><span class="line">password:(<span class="built_in">NSString</span> *)password </span><br><span class="line">complete:(RWSignInResponse)completeBlock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>This service takes a username, a password and a completion block as parameters. The given block is run when the sign-in is successful or when it fails. You could use this interface directly within the subscribeNext: block that currently logs the button touch event, but why would you? This is the kind of asynchronous, event-based behavior that ReactiveCocoa eats for breakfast!</p><p>Note: A dummy service is being used in this tutorial for simplicity, so that you don’t have any dependencies on external APIs. However, you’ve now run up against a very real problem, how do you use APIs not expressed in terms of signals?<br>Creating Signals</p><p>Fortunately, it’s rather easy to adapt existing asynchronous APIs to be expressed as a signal. First, remove the current signInButtonTouched: method from the RWViewController.m. You don’t need this logic as it will be replaced with a reactive equivalent.</p><p>Stay in RWViewController.m and add the following method:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-(RACSignal *)signInSignal &#123;</span><br><span class="line"><span class="built_in">return</span> [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">[self.signInService</span><br><span class="line">signInWithUsername:self.usernameTextField.text</span><br><span class="line">password:self.passwordTextField.text</span><br><span class="line">complete:^(BOOL success) &#123;</span><br><span class="line">[subscriber sendNext:@(success)];</span><br><span class="line">[subscriber sendCompleted];</span><br><span class="line">&#125;];</span><br><span class="line"><span class="built_in">return</span> nil;</span><br><span class="line">&#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above method creates a signal that signs in with the current username and password. Now for a breakdown of its component parts.</p><p>The above code uses the createSignal: method on RACSignal for signal creation. The block that describes this signal is a single argument, and is passed to this method. When this signal has a subscriber, the code within this block executes.</p><p>The block is passed a single subscriber instance that adopts the RACSubscriber protocol, which has methods you invoke in order to emit events; you may also send any number of next events, terminated with either an error or complete event. In this case, it sends a single next event to indicate whether the sign-in was a success, followed by a complete event.</p><p>The return type for this block is an RACDisposable object, and it allows you to perform any clean-up work that might be required when a subscription is cancelled or trashed. This signal does not have any clean-up requirements, hence nil is returned.</p><p>As you can see, it’s surprisingly simple to wrap an asynchronous API in a signal!</p><p>Now to make use of this new signal. Update the code you added to the end of viewDidLoad in the previous section as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[[self.signInButton</span><br><span class="line">rac_signalForControlEvents:UIControlEventTouchUpInside]</span><br><span class="line">map:^id(id x) &#123;</span><br><span class="line"><span class="built_in">return</span> [self signInSignal];</span><br><span class="line">&#125;]</span><br><span class="line">subscribeNext:^(id x) &#123;</span><br><span class="line">NSLog(@<span class="string">&quot;Sign in result: %@&quot;</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>The above code uses the map method used earlier to transform the button touch signal into the sign-in signal. The subscriber simply logs the result.</p><p>If you build and run, then tap the Sign In button, and take a look at the Xcode console, you’ll see the result of the above code …</p><p>… and the result isn’t quite what you might have expected!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2014-01-08 21:00:25.919 RWReactivePlayground[33818:a0b] Sign <span class="keyword">in</span> result:</span><br><span class="line">&lt;RACDynamicSignal: 0xa068a00&gt; name: +createSignal:</span><br></pre></td></tr></table></figure><p>The subscribeNext: block has been passed a signal all right, but not the result of the sign-in signal!</p><p>Time to illustrate this pipeline so you can see what’s going on:</p><p>The rac_signalForControlEvents emits a next event (with the source UIButton as its event data) when you tap the button. The map step creates and returns the sign-in signal, which means the following pipeline steps now receive a RACSignal. That is what you’re observing at the subscribeNext: step.</p><p>The situation above is sometimes called the signal of signals; in other words an outer signal that contains an inner signal. If you really wanted to, you could subscribe to the inner signal within the outer signal’s subscribeNext: block. However it would result in a nested mess! Fortunately, it’s a common problem, and ReactiveCocoa is ready for this scenario.</p><p>Signal of Signals</p><p>The solution to this problem is straightforward, just change the map step to a flattenMap step as shown below:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    [[[self.signInButton</span><br><span class="line">    rac_signalForControlEvents:UIControlEventTouchUpInside]</span><br><span class="line">    flattenMap:^id(id x) &#123;</span><br><span class="line">    <span class="built_in">return</span> [self signInSignal];</span><br><span class="line">    &#125;]</span><br><span class="line">    subscribeNext:^(id x) &#123;</span><br><span class="line">    NSLog(@<span class="string">&quot;Sign in result: %@&quot;</span>, x);</span><br><span class="line">    &#125;];```</span><br><span class="line"></span><br><span class="line">This maps the button touch event to a sign-in signal as before, but also flattens it by sending the events from the inner signal to the outer signal.</span><br><span class="line"></span><br><span class="line">Build and run, and keep an eye on the console. It should now <span class="built_in">log</span> whether the sign-in was successful or not:</span><br><span class="line">```bash</span><br><span class="line">2013-12-28 18:20:08.156 RWReactivePlayground[22993:a0b] Sign <span class="keyword">in</span> result: 0</span><br><span class="line">2013-12-28 18:25:50.927 RWReactivePlayground[22993:a0b] Sign <span class="keyword">in</span> result: 1</span><br></pre></td></tr></table></figure><p>Exciting stuff!</p><p>Now that the pipeline is doing what you want, the final step is to add the logic to the subscribeNext step to perform the required navigation upon successful sign-in. Replace the pipeline with the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[[self.signInButton</span><br><span class="line">rac_signalForControlEvents:UIControlEventTouchUpInside]</span><br><span class="line">flattenMap:^id(id x) &#123;</span><br><span class="line"><span class="built_in">return</span> [self signInSignal];</span><br><span class="line">&#125;]</span><br><span class="line">subscribeNext:^(NSNumber *signedIn) &#123;</span><br><span class="line">BOOL success = [signedIn boolValue];</span><br><span class="line">self.signInFailureText.hidden = success;</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">[self performSegueWithIdentifier:@<span class="string">&quot;signInSuccess&quot;</span> sender:self];</span><br><span class="line">&#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>The subscribeNext: block takes the result from the sign-in signal, updates the visibility of the signInFailureText text field accordingly, and performs the navigation segue if required.</p><p>Build and run to enjoy the kitten once more! Meow!</p><p>Did you notice there is one small user experience issue with the current application? When the sign-in service validates the supplied credentials, is should disable the Sign In button. This prevents the user from repeating the same sign-in. Furthermore, if a failed sign-in attempt occurred, the error message should be hidden when the user tries to sign-in once again.</p><p>But how should you add this logic to the current pipeline? Changing the button’s enabled state isn’t a transformation, filter or any of the other concepts you’ve encountered so far. Instead, it’s what is known as a side-effect; or logic you want to execute within a pipeline when a next event occurs, but it does not actually change the nature of the event itself.</p><p>Adding side-effects</p><p>Replace the current pipeline with the following:</p><pre><code class="bash">[[[[self.signInButtonrac_signalForControlEvents:UIControlEventTouchUpInside]doNext:^(id x) &#123;self.signInButton.enabled = NO;self.signInFailureText.hidden = YES;&#125;]flattenMap:^id(id x) &#123;return [self signInSignal];&#125;]subscribeNext:^(NSNumber *signedIn) &#123;self.signInButton.enabled = YES;BOOL success = [signedIn boolValue];self.signInFailureText.hidden = success;if (success) &#123;[self performSegueWithIdentifier:@&quot;signInSuccess&quot; sender:self];&#125;&#125;];```You can see how the above adds a doNext: step to the pipeline immediately after button touch event creation. Notice that the doNext: block does not return a value, because it’s a side-effect; it leaves the event itself unchanged.The doNext: block above sets the button enabled property to NO, and hides the failure text. Whilst the subscribeNext: block re-enables the button, and either displays or hides the failure text based on the result of the sign-in.It’s time to update the pipeline diagram to include this side effect. Bask in all it’s glory:Build and run the application to confirm the Sign In button enables and disables as expected.And with that, your work is done – the application is now fully reactive. Woot!If you got lost along the way, you can download the final project (complete with dependencies), or you can obtain the code from GitHub, where there is a commit to match each build and run step in this tutorial.Note: Disabling buttons while some asynchronous activity is underway is a common problem, and once again ReactiveCocoa is all over this little snafu. The RACCommand encapsulates this concept, and has an enabled signal that allows you to wire up the enabled property of a button to a signal. You might want to give the class a try.ConclusionsWant to learn even faster? Save time with ourvideo coursesHopefully this tutorial has given you a good foundation that will help you when starting to use ReactiveCocoa in your own applications. It can take a bit of practice to get used to the concepts, but like any language or program, once you get the hang of it it’s really quite simple. At the very core of ReactiveCocoa are signals, which are nothing more than streams of events. What could be simpler than that?With ReactiveCocoa one of the interesting things I have found is there are numerous ways in which you can solve the same problem. You might want to experiment with this application, and adjust the signals and pipelines to change the way they split and combine.It’s worth considering that the main goal of ReactiveCocoa is to make your code cleaner and easier to understand. Personally I find it easier to understand what an application does if its logic is represented as clear pipelines, using the fluent syntax.​</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My first Blog</title>
      <link href="/2017/09/11/00-MyFirstBlog/"/>
      <url>/2017/09/11/00-MyFirstBlog/</url>
      
        <content type="html"><![CDATA[<p>  I used three days to built my block with hexo<br>  I’m so happy!</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
